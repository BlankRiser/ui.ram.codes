{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "d3-line-chart-1",
  "type": "registry:component",
  "title": "D3 Line Chart 1",
  "description": "Line chart component built using D3",
  "dependencies": [
    "d3"
  ],
  "devDependencies": [
    "@types/d3"
  ],
  "registryDependencies": [
    "button",
    "chart"
  ],
  "files": [
    {
      "path": "src/registry/charts/d3/line-chart-1.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\n\ninterface DataPoint {\n  month: string;\n  series1: number;\n  series2: number;\n}\n\nconst data: DataPoint[] = [\n  { month: \"Jan\", series1: 1, series2: 2 },\n  { month: \"Feb\", series1: 3, series2: 2 },\n  { month: \"Mar\", series1: 2, series2: 3 },\n  { month: \"Apr\", series1: 4, series2: 5 },\n  { month: \"May\", series1: 5, series2: 3 },\n  { month: \"Jun\", series1: 6, series2: 2 },\n  { month: \"Jul\", series1: 7, series2: 4 },\n];\n\nexport const D3LineChart1 = () => {\n  const svgRef = useRef<SVGSVGElement>(null);\n\n  useEffect(() => {\n    if (!svgRef.current) return;\n\n    // Clear existing content\n    d3.select(svgRef.current).selectAll(\"*\").remove();\n\n    // Set dimensions\n    const margin = { top: 60, right: 30, bottom: 60, left: 60 };\n    const width = 800 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    // Create SVG\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n    // Scales\n    const x = d3\n      .scalePoint()\n      .domain(data.map((d) => d.month))\n      .range([0, width])\n      .padding(0.5);\n\n    const y = d3\n      .scaleLinear()\n      .domain([0, d3.max(data, (d) => Math.max(d.series1, d.series2)) || 0])\n      .range([height, 0])\n      .nice();\n\n    // Line generators\n    const line = d3\n      .line<DataPoint>()\n      .x((d) => x(d.month)!)\n      .y((d) => y(d.series1))\n      .curve(d3.curveCardinal);\n\n    const line2 = d3\n      .line<DataPoint>()\n      .x((d) => x(d.month)!)\n      .y((d) => y(d.series2))\n      .curve(d3.curveCardinal);\n\n    // Add grid lines\n    svg\n      .append(\"g\")\n      .attr(\"class\", \"grid\")\n      .call(\n        d3\n          .axisLeft(y)\n          .tickSize(-width)\n          .tickFormat(() => \"\"),\n      )\n      .style(\"stroke\", \"var(--muted)\")\n      .style(\"stroke-opacity\", \"0.1\");\n\n    // Add axes\n    svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(0,${height})`)\n      .call(d3.axisBottom(x))\n      .style(\"color\", \"var(--foreground)\");\n\n    svg.append(\"g\").call(d3.axisLeft(y)).style(\"color\", \"var(--foreground)\");\n\n    // Add lines\n    svg\n      .append(\"path\")\n      .datum(data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"var(--chart-1)\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"d\", line);\n\n    svg\n      .append(\"path\")\n      .datum(data)\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"var(--chart-2)\")\n      .attr(\"stroke-width\", 2)\n      .attr(\"d\", line2);\n\n    // Add title\n    svg\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", -margin.top / 2)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"1.2em\")\n      .style(\"fill\", \"var(--foreground)\")\n      .text(\"Sample Line Chart\");\n\n    // Add subtitle\n    svg\n      .append(\"text\")\n      .attr(\"x\", width / 2)\n      .attr(\"y\", -margin.top / 4)\n      .attr(\"text-anchor\", \"middle\")\n      .style(\"font-size\", \"0.9em\")\n      .style(\"fill\", \"var(--foreground)\")\n      .text(\"An example of a line chart with D3 and React\");\n\n    // Add legend\n    const legend = svg\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2},${height + 40})`);\n\n    // Series 1 legend\n    legend\n      .append(\"line\")\n      .attr(\"x1\", -100)\n      .attr(\"x2\", -80)\n      .attr(\"stroke\", \"var(--chart-1)\")\n      .attr(\"stroke-width\", 2);\n\n    legend\n      .append(\"text\")\n      .attr(\"x\", -70)\n      .attr(\"y\", 4)\n      .text(\"Series 1\")\n      .style(\"fill\", \"var(--foreground)\");\n\n    // Series 2 legend\n    legend\n      .append(\"line\")\n      .attr(\"x1\", 20)\n      .attr(\"x2\", 40)\n      .attr(\"stroke\", \"var(--chart-2)\")\n      .attr(\"stroke-width\", 2);\n\n    legend\n      .append(\"text\")\n      .attr(\"x\", 50)\n      .attr(\"y\", 4)\n      .text(\"Series 2\")\n      .style(\"fill\", \"var(--foreground)\");\n\n    // Add tooltip\n    const tooltip = d3\n      .select(\"body\")\n      .append(\"div\")\n      .attr(\"class\", \"tooltip\")\n      .style(\"position\", \"absolute\")\n      .style(\"visibility\", \"hidden\")\n      .style(\"background-color\", \"var(--background)\")\n      .style(\"padding\", \"10px\")\n      .style(\"border-radius\", \"4px\")\n      .style(\"box-shadow\", \"0 0 10px rgba(0,0,0,0.1)\")\n      .style(\"pointer-events\", \"none\");\n\n    // Add hover effects\n    const focus = svg.append(\"g\").style(\"display\", \"none\");\n\n    // Add vertical line\n    focus\n      .append(\"line\")\n      .attr(\"class\", \"vertical-line\")\n      .attr(\"y1\", 0)\n      .attr(\"y2\", height)\n      .style(\"stroke\", \"var(--muted)\")\n      .style(\"stroke-width\", \"1px\")\n      .style(\"stroke-dasharray\", \"3,3\");\n\n    // Add overlay for mouse events\n    svg\n      .append(\"rect\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .style(\"fill\", \"none\")\n      .style(\"pointer-events\", \"all\")\n      .on(\"mouseover\", () => {\n        focus.style(\"display\", null);\n        tooltip.style(\"visibility\", \"visible\");\n      })\n      .on(\"mouseout\", () => {\n        focus.style(\"display\", \"none\");\n        tooltip.style(\"visibility\", \"hidden\");\n      })\n      .on(\"mousemove\", (event) => {\n        const mouseX = d3.pointer(event)[0];\n        const xInvert = x.domain().map((d) => ({\n          month: d,\n          x: x(d) || 0,\n        }));\n        const bisect = d3.bisector((d: { x: number }) => d.x).left;\n        const index = bisect(xInvert, mouseX);\n        const d = data[index];\n\n        if (d) {\n          focus\n            .select(\".vertical-line\")\n            .attr(\"transform\", `translate(${x(d.month)},0)`);\n\n          tooltip\n            .html(\n              `<div class=\"bg-neutral-100/30 backdrop-blur-lg dark:bg-gray-900/30 p-2 text-black dark:text-white rounded shadow-lg\">\n                <strong>${d.month}</strong><br/>\n                <span style=\"color:var(--chart-1)\">Series 1: ${d.series1}</span><br/>\n                <span style=\"color:var(--chart-2)\">Series 2: ${d.series2}</span>\n              </div>`,\n            )\n            .style(\"left\", `${event.pageX + 10}px`)\n            .style(\"top\", `${event.pageY - 10}px`);\n        }\n      });\n\n    // Cleanup function\n    return () => {\n      tooltip.remove();\n    };\n  }, []);\n\n  return <svg ref={svgRef}></svg>;\n};\n",
      "type": "registry:component"
    }
  ]
}